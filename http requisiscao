#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// --- ALTERE AQUI ---
const char* ssid = "PIC2-2.4G";
const char* password = "engcomp@ufes";

// --- ALTERE AQUI ---
// Coloque a URL "Raw" PERMANENTE do seu arquivo JSON (sem o token!)
String url_base_dados = "https://raw.githubusercontent.com/BrenoCSilva/Arvore-2/refs/heads/main/arvore.json";

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.print("oiiiiiiiiiiiiiiiiiiii: ");

  // --- 1. Conectando ao Wi-Fi ---
  Serial.print("Conectando ao Wi-Fi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado!");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // --- Simulação: UID lido pelo sensor RFID ---
  // No seu projeto final, esta variável virá do Arduino Mega ou do leitor RC522
  String uid_lido = "CF877841"; 
  Serial.println("\n------------------------------");
  Serial.print("Simulando leitura do UID: ");
  Serial.println(uid_lido);

  // --- 2. Fazendo a Requisição HTTP GET ---
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    Serial.print("Fazendo requisição para: ");
    Serial.println(url_base_dados);

    // Inicia a conexão com a URL
    http.begin(url_base_dados); 
    
    // Faz a requisição GET e guarda o código da resposta (ex: 200 para sucesso, 404 para não encontrado)
    int httpCode = http.GET(); 

    if (httpCode > 0) { // Se a requisição foi bem-sucedida
      Serial.printf("Código de resposta HTTP: %d\n", httpCode);

      if (httpCode == HTTP_CODE_OK) {
        // Pega o corpo da resposta (o conteúdo do seu arquivo JSON) como uma String
        String payload = http.getString();
        
        // --- 3. Processando o JSON (Parsing) ---
        // Aloca memória para o documento JSON. Ajuste o valor se seu JSON for muito grande.
        DynamicJsonDocument doc(2048);

        // Converte a String 'payload' para um objeto JSON que o código pode entender
        DeserializationError error = deserializeJson(doc, payload);

        if (error) {
          Serial.print("Falha ao processar o JSON: ");
          Serial.println(error.c_str());
        } else {
          Serial.println("JSON processado com sucesso!");

          // --- 4. Extraindo e Usando os Dados ---
          // Agora você pode acessar os dados como se fossem um objeto
          
          // Pega o objeto JSON correspondente ao UID lido
          JsonObject arvore_info = doc[uid_lido];

          // Verifica se o UID realmente existe no seu JSON
          if (arvore_info.isNull()) {
             Serial.println("ERRO: UID não encontrado na base de dados!");
          } else {
             // Extrai cada pedaço da informação
             const char* nome = arvore_info["nome"];
             const char* porte = arvore_info["porte"];
             bool tem_flor = arvore_info["floracao"]["tem"];
             int primeiro_mes_flor = arvore_info["floracao"]["meses"][0]; // Pega o primeiro mês da lista

             // Mostra os resultados no Monitor Serial
             Serial.println("--- DADOS DA ÁRVORE ENCONTRADA ---");
             Serial.printf("Nome: %s\n", nome);
             Serial.printf("Porte: %s\n", porte);
             Serial.printf("Tem flor? %s\n", tem_flor ? "Sim" : "Não");
             Serial.printf("Primeiro mês de floração: %d\n", primeiro_mes_flor);
          }
        }
      }
    } else {
      Serial.printf("Falha na requisição HTTP. Erro: %s\n", http.errorToString(httpCode).c_str());
    }

    // Libera os recursos da conexão
    http.end(); 
  } else {
    Serial.println("Erro: Desconectado do Wi-Fi.");
  }

  // Espera 10 segundos antes de tentar de novo
  delay(10000); 
}
